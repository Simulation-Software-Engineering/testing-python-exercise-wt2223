"""
Tests for functions in class SolveDiffusion2D
"""

from diffusion2d import SolveDiffusion2D
import numpy as np
import unittest as ut

class TestDiffusion2D(ut.TestCase):

    def setUp(self):
        self.solver = SolveDiffusion2D()
        self.solver.nx = 25
        self.solver.ny = 25
        self.solver.dx = 0.2
        self.solver.dy = 0.2
        self.solver.T_cold = 200.
        self.solver.T_hot = 600.

    def test_initialize_domain(self):
        """
        Check function SolveDiffusion2D.initialize_domain
        """
        w = 5.
        h = 5.
        dx = 0.2
        dy = 0.2
        nx = 25
        ny = 25

        
        self.solver.initialize_domain(w, h, dx, dy)

        self.assertEqual(nx, self.solver.nx)
        self.assertEqual(ny, self.solver.ny)


    def test_initialize_physical_parameters(self):
        """
        Checks function SolveDiffusion2D.initialize_domain
        """
        d = 2.
        T_cold = 200.
        T_hot = 600.
        dt = 0.005000000000000001

        self.solver.initialize_physical_parameters(d, T_cold, T_hot)

        self.assertEqual(dt,self.solver.dt)


    def test_set_initial_condition(self):
        """
        Checks function SolveDiffusion2D.get_initial_function
        """
        expectedArray = [[200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.]]

        result = self.solver.set_initial_condition()
        
        np.testing.assert_array_equal(result, expectedArray) 
