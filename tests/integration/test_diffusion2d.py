"""
Tests for functionality checks in class SolveDiffusion2D
"""

from diffusion2d import SolveDiffusion2D
import numpy as np


def test_initialize_physical_parameters():
    """
    Checks function SolveDiffusion2D.initialize_domain
    """
    w = 5.
    h = 5.
    dx = 0.2
    dy = 0.2
    d = 2.
    T_cold = 200.
    T_hot = 600.
    dt = 0.005000000000000001

    solver = SolveDiffusion2D()
    solver.initialize_domain(w, h, dx, dy)
    solver.initialize_physical_parameters(d, T_cold, T_hot)

    assert dt == solver.dt

def test_set_initial_condition():
    """
    Checks function SolveDiffusion2D.get_initial_function
    """

    expectedArray = [[200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 200., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 200., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 200., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.],
        [200., 200., 200., 200., 200., 200., 200., 200., 200., 200., 200.,
            200., 200., 200., 200., 200., 600., 600., 600., 600., 600., 600.,
            600., 600., 600.]]

    w = 5.
    h = 5.
    dx = 0.2
    dy = 0.2
    d = 2.
    T_cold = 200.
    T_hot = 600.
    dt = 0.005000000000000001

    solver = SolveDiffusion2D()
    solver.initialize_domain(w, h, dx, dy)
    solver.initialize_physical_parameters(d, T_cold, T_hot)
    result = solver.set_initial_condition()
        
    np.testing.assert_array_equal(result, expectedArray) 

